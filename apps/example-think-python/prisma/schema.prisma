generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  ext_expires_in    Int?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                          String                        @id @default(cuid())
  name                        String?
  email                       String?                       @unique
  emailVerified               DateTime?                     @map("email_verified")
  image                       String?
  created_at                  DateTime                      @default(now())
  updated_at                  DateTime                      @updatedAt
  chapter                     Int                           @default(1)
  classId                     String?                       @map("class_id")
  timeZone                    String?                       @map("time_zone")
  accounts                    Account[]
  notes                       Note[]
  sessions                    Session[]
  short_answers               ShortAnswer[]
  summaries                   Summary[]
  ConstructedResponse         ConstructedResponse[]
  ConstructedResponseFeedback ConstructedResponseFeedback[]
  Event                       Event[]
  FocusTime                   FocusTime[]

  @@index([classId])
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Teacher {
  id         String  @id
  isApproved Boolean @default(false)
  classId    String  @map("class_id")

  @@map("teachers")
}

model Summary {
  id               String   @id @default(uuid())
  userId           String   @map("user_id")
  chapter          Int
  isPassed         Boolean
  containmentScore Float    @map("containment_score")
  similarityScore  Float    @map("similarity_score")
  wordingScore     Float?   @map("wording_score")
  contentScore     Float?   @map("content_score")
  text             String
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id])

  @@map("summaries")
}

model Note {
  id              String   @id @default(uuid())
  y               Float
  noteText        String?  @map("note_text")
  highlightedText String   @map("highlighted_text")
  chapter         Int
  color           String   @default("#3730a3")
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  userId          String   @map("user_id")
  range           String
  user            User     @relation(fields: [userId], references: [id])

  @@map("notes")
}

model FocusTime {
  id            String   @id @default(uuid())
  userId        String   @map("user_id")
  totalViewTime Int      @map("total_view_time")
  created_at    DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id])

  @@map("focus_times")
}

model Event {
  id         String   @id @default(uuid())
  eventType  String   @map("event_type")
  userId     String   @map("user_id")
  page       String
  data       Json?
  created_at DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([eventType])
  @@map("events")
}

model Section {
  section_id String   @id @db.VarChar
  created_at DateTime @default(now()) @db.Timestamptz(6)
  clean_text String?  @db.VarChar
  raw_text   String?  @db.VarChar

  @@map("sections")
}

model SubSection {
  id         String                 @id @unique @map("subsection_id")
  sectionId  String                 @map("section_id")
  subsection Int
  heading    String
  raw_text   String
  clean_text String?
  slug       String
  qa_output  String?
  keyphrases String[]
  question   String?
  answer     String?
  embedding  Unsupported("vector")?

  @@index([sectionId])
  @@map("subsections")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ShortAnswer {
  id           String   @id
  user_id      String
  chapter      Int
  subsection   Int
  slug         String
  isPassed     Boolean
  text         String
  submitted_at DateTime @db.Timestamp(6)
  users        User     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("short_answers")
}

model ConstructedResponse {
  id String @id @default(uuid())

  userId     String   @map("user_id")
  chapter    Int
  subsection Int
  score      Int
  response   String
  created_at DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@map("constructed_responses")
}

model ConstructedResponseFeedback {
  id String @id @default(uuid())

  userId     String   @map("user_id")
  pageSlug   String   @map("page_slug")
  isPositive Boolean  @map("is_positive")
  feedback   String
  tags       String[]
  created_at DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@map("constructed_responses_feedback")
}
